// node_modules/.pnpm/@strapi+plugin-users-permissions@5.9.0_fi7rh6dp263t4jasx5bizsbdva/node_modules/@strapi/plugin-users-permissions/dist/_chunks/index-CsepshPM.mjs
var __variableDynamicImportRuntimeHelper = (glob, path, segs) => {
  const v = glob[path];
  if (v) {
    return typeof v === "function" ? v() : Promise.resolve(v);
  }
  return new Promise((_, reject) => {
    (typeof queueMicrotask === "function" ? queueMicrotask : setTimeout)(
      reject.bind(
        null,
        new Error(
          "Unknown variable dynamic import: " + path + (path.split("/").length !== segs ? ". Note that variables only represent file names one level deep." : "")
        )
      )
    );
  });
};
var name$1 = "@strapi/plugin-users-permissions";
var version = "5.8.1";
var description = "Protect your API with a full-authentication process based on JWT";
var repository = {
  type: "git",
  url: "git://github.com/strapi/strapi.git"
};
var license = "SEE LICENSE IN LICENSE";
var author = {
  name: "Strapi Solutions SAS",
  email: "hi@strapi.io",
  url: "https://strapi.io"
};
var maintainers = [
  {
    name: "Strapi Solutions SAS",
    email: "hi@strapi.io",
    url: "https://strapi.io"
  }
];
var exports = {
  "./strapi-admin": {
    source: "./admin/src/index.js",
    "import": "./dist/admin/index.mjs",
    require: "./dist/admin/index.js",
    "default": "./dist/admin/index.js"
  },
  "./strapi-server": {
    source: "./server/index.js",
    require: "./server/index.js",
    "default": "./server/index.js"
  },
  "./package.json": "./package.json"
};
var scripts = {
  build: "pack-up build",
  clean: "run -T rimraf dist",
  lint: "run -T eslint .",
  "test:front": "run -T cross-env IS_EE=true jest --config ./jest.config.front.js",
  "test:front:ce": "run -T cross-env IS_EE=false jest --config ./jest.config.front.js",
  "test:front:watch": "run -T cross-env IS_EE=true jest --config ./jest.config.front.js --watchAll",
  "test:front:watch:ce": "run -T cross-env IS_EE=false jest --config ./jest.config.front.js --watchAll",
  "test:unit": "run -T jest",
  "test:unit:watch": "run -T jest --watch",
  watch: "pack-up watch"
};
var dependencies = {
  "@strapi/design-system": "2.0.0-rc.14",
  "@strapi/icons": "2.0.0-rc.14",
  "@strapi/utils": "5.8.1",
  bcryptjs: "2.4.3",
  formik: "2.4.5",
  grant: "^5.4.8",
  immer: "9.0.21",
  jsonwebtoken: "9.0.0",
  "jwk-to-pem": "2.0.5",
  koa: "2.15.2",
  "koa2-ratelimit": "^1.1.3",
  lodash: "4.17.21",
  "prop-types": "^15.8.1",
  purest: "4.0.2",
  "react-intl": "6.6.2",
  "react-query": "3.39.3",
  "react-redux": "8.1.3",
  "url-join": "4.0.1",
  yup: "0.32.9"
};
var devDependencies = {
  "@strapi/pack-up": "5.0.2",
  "@strapi/strapi": "5.8.1",
  "@testing-library/dom": "10.1.0",
  "@testing-library/react": "15.0.7",
  "@testing-library/user-event": "14.5.2",
  msw: "1.3.0",
  react: "18.3.1",
  "react-dom": "18.3.1",
  "react-router-dom": "6.22.3",
  "styled-components": "6.1.8"
};
var peerDependencies = {
  "@strapi/strapi": "^5.0.0",
  react: "^17.0.0 || ^18.0.0",
  "react-dom": "^17.0.0 || ^18.0.0",
  "react-router-dom": "^6.0.0",
  "styled-components": "^6.0.0"
};
var engines = {
  node: ">=18.0.0 <=22.x.x",
  npm: ">=6.0.0"
};
var strapi = {
  displayName: "Roles & Permissions",
  name: "users-permissions",
  description: "Protect your API with a full authentication process based on JWT. This plugin comes also with an ACL strategy that allows you to manage the permissions between the groups of users.",
  required: true,
  kind: "plugin"
};
var pluginPkg = {
  name: name$1,
  version,
  description,
  repository,
  license,
  author,
  maintainers,
  exports,
  scripts,
  dependencies,
  devDependencies,
  peerDependencies,
  engines,
  strapi
};
var PERMISSIONS = {
  // Roles
  accessRoles: [
    { action: "plugin::users-permissions.roles.create", subject: null },
    { action: "plugin::users-permissions.roles.read", subject: null }
  ],
  createRole: [{ action: "plugin::users-permissions.roles.create", subject: null }],
  deleteRole: [{ action: "plugin::users-permissions.roles.delete", subject: null }],
  readRoles: [{ action: "plugin::users-permissions.roles.read", subject: null }],
  updateRole: [{ action: "plugin::users-permissions.roles.update", subject: null }],
  // AdvancedSettings
  readAdvancedSettings: [
    { action: "plugin::users-permissions.advanced-settings.read", subject: null }
  ],
  updateAdvancedSettings: [
    { action: "plugin::users-permissions.advanced-settings.update", subject: null }
  ],
  // Emails
  readEmailTemplates: [{ action: "plugin::users-permissions.email-templates.read", subject: null }],
  updateEmailTemplates: [
    { action: "plugin::users-permissions.email-templates.update", subject: null }
  ],
  // Providers
  readProviders: [{ action: "plugin::users-permissions.providers.read", subject: null }],
  updateProviders: [{ action: "plugin::users-permissions.providers.update", subject: null }]
};
var pluginId = pluginPkg.name.replace(/^@strapi\/plugin-/i, "");
var getTrad = (id) => `${pluginId}.${id}`;
var prefixPluginTranslations = (trad, pluginId2) => {
  return Object.keys(trad).reduce((acc, current) => {
    acc[`${pluginId2}.${current}`] = trad[current];
    return acc;
  }, {});
};
var name = pluginPkg.strapi.name;
var index = {
  register(app) {
    app.createSettingSection(
      {
        id: "users-permissions",
        intlLabel: {
          id: getTrad("Settings.section-label"),
          defaultMessage: "Users & Permissions plugin"
        }
      },
      [
        {
          intlLabel: {
            id: "global.roles",
            defaultMessage: "Roles"
          },
          id: "roles",
          to: `users-permissions/roles`,
          Component: () => import("./index-BifzOY9J-SOV2VK5W.js"),
          permissions: PERMISSIONS.accessRoles
        },
        {
          intlLabel: {
            id: getTrad("HeaderNav.link.providers"),
            defaultMessage: "Providers"
          },
          id: "providers",
          to: `users-permissions/providers`,
          Component: () => import("./index-BpBvwD7E-HXT3UYJC.js"),
          permissions: PERMISSIONS.readProviders
        },
        {
          intlLabel: {
            id: getTrad("HeaderNav.link.emailTemplates"),
            defaultMessage: "Email templates"
          },
          id: "email-templates",
          to: `users-permissions/email-templates`,
          Component: () => import("./index-BCw6zVHf-CN52GQNI.js").then((mod) => ({
            default: mod.ProtectedEmailTemplatesPage
          })),
          permissions: PERMISSIONS.readEmailTemplates
        },
        {
          intlLabel: {
            id: getTrad("HeaderNav.link.advancedSettings"),
            defaultMessage: "Advanced Settings"
          },
          id: "advanced-settings",
          to: `users-permissions/advanced-settings`,
          Component: () => import("./index-BdOumcDH-B2DLIFPY.js").then((mod) => ({
            default: mod.ProtectedAdvancedSettingsPage
          })),
          permissions: PERMISSIONS.readAdvancedSettings
        }
      ]
    );
    app.registerPlugin({
      id: "users-permissions",
      name
    });
  },
  bootstrap() {
  },
  async registerTrads({ locales }) {
    const importedTrads = await Promise.all(
      locales.map((locale) => {
        return __variableDynamicImportRuntimeHelper(Object.assign({ "./translations/ar.json": () => import("./ar-CK8BRRXB-JPPS52KJ.js"), "./translations/cs.json": () => import("./cs-BVigMk0l-JY3MCLNX.js"), "./translations/de.json": () => import("./de-BKUdRFI4-CPRLDXUC.js"), "./translations/dk.json": () => import("./dk-BQiTK50l-4JMVV4MV.js"), "./translations/en.json": () => import("./en-DOHtPf-2-FBRFCIBR.js"), "./translations/es.json": () => import("./es-DNgOVMjD-3ZUJILUV.js"), "./translations/fr.json": () => import("./fr-DkgRugiU-MDSI5ZUG.js"), "./translations/id.json": () => import("./id-BdEsvnaF-L7R2WJIF.js"), "./translations/it.json": () => import("./it-B-rv0E24-XQ6CTMEA.js"), "./translations/ja.json": () => import("./ja-C8K-VBPD-BEB6VXFI.js"), "./translations/ko.json": () => import("./ko-Busb0wIY-DF2PHEKC.js"), "./translations/ms.json": () => import("./ms-ByvsQjRt-AGT5MXN2.js"), "./translations/nl.json": () => import("./nl-5qO8Rpcy-X7MGTBZQ.js"), "./translations/pl.json": () => import("./pl-BdIzifBE-2GFRS57O.js"), "./translations/pt-BR.json": () => import("./pt-BR-f0p23AQZ-RK5YQSL3.js"), "./translations/pt.json": () => import("./pt-BIO24ioG-YW5WFP25.js"), "./translations/ru.json": () => import("./ru-VWy-IB7K-4LS6CJZK.js"), "./translations/sk.json": () => import("./sk-B_LIcepm-UXESP7OS.js"), "./translations/sv.json": () => import("./sv-ABLKOokl-OMUFQE72.js"), "./translations/th.json": () => import("./th-DKyP7ueR-KGZZCWY3.js"), "./translations/tr.json": () => import("./tr-qa1Q5UjC-WHCHBIMM.js"), "./translations/uk.json": () => import("./uk-BmRqbeQc-Y6IUTT3K.js"), "./translations/vi.json": () => import("./vi-HW-EdMea-SGF7N7SX.js"), "./translations/zh-Hans.json": () => import("./zh-Hans-BHilK-yc-W4YNVSYR.js"), "./translations/zh.json": () => import("./zh-5hKkVPA4-CYSEUKFJ.js") }), `./translations/${locale}.json`, 3).then(({ default: data }) => {
          return {
            data: prefixPluginTranslations(data, "users-permissions"),
            locale
          };
        }).catch(() => {
          return {
            data: {},
            locale
          };
        });
      })
    );
    return Promise.resolve(importedTrads);
  }
};

export {
  PERMISSIONS,
  getTrad,
  index
};
//# sourceMappingURL=chunk-JEVXNDBW.js.map
