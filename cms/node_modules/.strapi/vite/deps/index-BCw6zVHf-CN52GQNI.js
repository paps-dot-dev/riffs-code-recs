import {
  useTracking
} from "./chunk-BEBPOPVE.js";
import {
  require_prop_types
} from "./chunk-NLIYFBQI.js";
import "./chunk-Q4XPYTGN.js";
import "./chunk-POCRFQ2R.js";
import "./chunk-RL2RS7B6.js";
import "./chunk-IDNOQWBL.js";
import "./chunk-63F2HNCM.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-GSJ5JY3J.js";
import "./chunk-MZRNHBPI.js";
import {
  useIntl
} from "./chunk-W5YB4I3Z.js";
import "./chunk-K2ONW7AQ.js";
import "./chunk-CFHZ2GI7.js";
import "./chunk-TPFBIRTQ.js";
import "./chunk-HOLHKRJF.js";
import "./chunk-3MZBZKOO.js";
import "./chunk-35AZTX3N.js";
import "./chunk-PGI5Y7U7.js";
import "./chunk-GU6OIDBX.js";
import {
  require_isEmpty
} from "./chunk-ZAGTUXVT.js";
import "./chunk-FLAFXDPQ.js";
import "./chunk-FCIZPUKP.js";
import "./chunk-AKJORPDX.js";
import {
  Form2 as Form,
  Layouts,
  MemoizedInputRenderer,
  create4 as create,
  create6 as create2,
  errorsTrads,
  useFetchClient,
  useMutation,
  useQuery,
  useQueryClient
} from "./chunk-HH6IMT5T.js";
import {
  Page,
  useAPIErrorHandler,
  useNotification,
  useRBAC
} from "./chunk-VKH5CSPD.js";
import {
  Box,
  Breadcrumbs,
  Button,
  Crumb,
  Grid,
  IconButton,
  Modal,
  Table,
  Tbody,
  Td,
  Th,
  Thead,
  Tr,
  Typography,
  VisuallyHidden,
  useNotifyAT
} from "./chunk-YOH64ARV.js";
import "./chunk-IYHJZKHV.js";
import "./chunk-BNKKIWCQ.js";
import "./chunk-ZNJG7DAB.js";
import {
  ForwardRef$1r,
  ForwardRef$4x,
  ForwardRef$59
} from "./chunk-6KUY6VRU.js";
import {
  require_jsx_runtime
} from "./chunk-7UPSCK2M.js";
import "./chunk-G3ROERZ2.js";
import {
  require_react
} from "./chunk-KUWPP3IT.js";
import {
  PERMISSIONS,
  getTrad
} from "./chunk-JEVXNDBW.js";
import {
  __toESM
} from "./chunk-WGAPYIUP.js";

// node_modules/.pnpm/@strapi+plugin-users-permissions@5.9.0_fi7rh6dp263t4jasx5bizsbdva/node_modules/@strapi/plugin-users-permissions/dist/_chunks/index-BCw6zVHf.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var import_isEmpty = __toESM(require_isEmpty(), 1);
var import_prop_types = __toESM(require_prop_types(), 1);
var schema = create2().shape({
  options: create2().shape({
    from: create2().shape({
      name: create().required({
        id: errorsTrads.required.id,
        defaultMessage: "This field is required"
      }),
      email: create().email(errorsTrads.email).required({
        id: errorsTrads.required.id,
        defaultMessage: "This field is required"
      })
    }).required(),
    response_email: create().email(errorsTrads.email),
    object: create().required({
      id: errorsTrads.required.id,
      defaultMessage: "This field is required"
    }),
    message: create().required({
      id: errorsTrads.required.id,
      defaultMessage: "This field is required"
    })
  }).required(errorsTrads.required.id)
});
var EmailForm = ({ template = {}, onToggle, open, onSubmit }) => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime.jsx)(Modal.Root, { open, onOpenChange: onToggle, children: (0, import_jsx_runtime.jsxs)(Modal.Content, { children: [
    (0, import_jsx_runtime.jsxs)(Modal.Header, { children: [
      (0, import_jsx_runtime.jsxs)(
        Breadcrumbs,
        {
          label: `${formatMessage({
            id: getTrad("PopUpForm.header.edit.email-templates"),
            defaultMessage: "Edit email template"
          })}, ${template.display ? formatMessage({
            id: getTrad(template.display),
            defaultMessage: template.display
          }) : ""}`,
          children: [
            (0, import_jsx_runtime.jsx)(Crumb, { children: formatMessage({
              id: getTrad("PopUpForm.header.edit.email-templates"),
              defaultMessage: "Edit email template"
            }) }),
            (0, import_jsx_runtime.jsx)(Crumb, { isCurrent: true, children: template.display ? formatMessage({ id: getTrad(template.display), defaultMessage: template.display }) : "" })
          ]
        }
      ),
      (0, import_jsx_runtime.jsx)(VisuallyHidden, { children: (0, import_jsx_runtime.jsx)(Modal.Title, { children: `${formatMessage({
        id: getTrad("PopUpForm.header.edit.email-templates"),
        defaultMessage: "Edit email template"
      })}, ${template.display ? formatMessage({ id: getTrad(template.display), defaultMessage: template.display }) : ""}` }) })
    ] }),
    (0, import_jsx_runtime.jsx)(Form, { onSubmit, initialValues: template, validationSchema: schema, children: ({ isSubmitting }) => {
      return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
        (0, import_jsx_runtime.jsx)(Modal.Body, { children: (0, import_jsx_runtime.jsx)(Grid.Root, { gap: 5, children: [
          {
            label: formatMessage({
              id: getTrad("PopUpForm.Email.options.from.name.label"),
              defaultMessage: "Shipper name"
            }),
            name: "options.from.name",
            size: 6,
            type: "string"
          },
          {
            label: formatMessage({
              id: getTrad("PopUpForm.Email.options.from.email.label"),
              defaultMessage: "Shipper email"
            }),
            name: "options.from.email",
            size: 6,
            type: "string"
          },
          {
            label: formatMessage({
              id: getTrad("PopUpForm.Email.options.response_email.label"),
              defaultMessage: "Response email"
            }),
            name: "options.response_email",
            size: 6,
            type: "string"
          },
          {
            label: formatMessage({
              id: getTrad("PopUpForm.Email.options.object.label"),
              defaultMessage: "Subject"
            }),
            name: "options.object",
            size: 6,
            type: "string"
          },
          {
            label: formatMessage({
              id: getTrad("PopUpForm.Email.options.message.label"),
              defaultMessage: "Message"
            }),
            name: "options.message",
            size: 12,
            type: "text"
          }
        ].map(({ size, ...field }) => (0, import_jsx_runtime.jsx)(
          Grid.Item,
          {
            col: size,
            direction: "column",
            alignItems: "stretch",
            children: (0, import_jsx_runtime.jsx)(MemoizedInputRenderer, { ...field })
          },
          field.name
        )) }) }),
        (0, import_jsx_runtime.jsxs)(Modal.Footer, { children: [
          (0, import_jsx_runtime.jsx)(Modal.Close, { children: (0, import_jsx_runtime.jsx)(Button, { variant: "tertiary", children: "Cancel" }) }),
          (0, import_jsx_runtime.jsx)(Button, { loading: isSubmitting, type: "submit", children: "Finish" })
        ] })
      ] });
    } })
  ] }) });
};
EmailForm.defaultProps = {
  template: {}
};
EmailForm.propTypes = {
  template: import_prop_types.default.shape({
    display: import_prop_types.default.string,
    icon: import_prop_types.default.string,
    options: import_prop_types.default.shape({
      from: import_prop_types.default.shape({
        name: import_prop_types.default.string,
        email: import_prop_types.default.string
      }),
      message: import_prop_types.default.string,
      object: import_prop_types.default.string,
      response_email: import_prop_types.default.string
    })
  }),
  open: import_prop_types.default.bool.isRequired,
  onSubmit: import_prop_types.default.func.isRequired,
  onToggle: import_prop_types.default.func.isRequired
};
var EmailTable = ({ canUpdate, onEditClick }) => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime.jsxs)(Table, { colCount: 3, rowCount: 3, children: [
    (0, import_jsx_runtime.jsx)(Thead, { children: (0, import_jsx_runtime.jsxs)(Tr, { children: [
      (0, import_jsx_runtime.jsx)(Th, { width: "1%", children: (0, import_jsx_runtime.jsx)(VisuallyHidden, { children: formatMessage({
        id: getTrad("Email.template.table.icon.label"),
        defaultMessage: "icon"
      }) }) }),
      (0, import_jsx_runtime.jsx)(Th, { children: (0, import_jsx_runtime.jsx)(Typography, { variant: "sigma", textColor: "neutral600", children: formatMessage({
        id: getTrad("Email.template.table.name.label"),
        defaultMessage: "name"
      }) }) }),
      (0, import_jsx_runtime.jsx)(Th, { width: "1%", children: (0, import_jsx_runtime.jsx)(VisuallyHidden, { children: formatMessage({
        id: getTrad("Email.template.table.action.label"),
        defaultMessage: "action"
      }) }) })
    ] }) }),
    (0, import_jsx_runtime.jsxs)(Tbody, { children: [
      (0, import_jsx_runtime.jsxs)(Tr, { cursor: "pointer", onClick: () => onEditClick("reset_password"), children: [
        (0, import_jsx_runtime.jsx)(Td, { children: (0, import_jsx_runtime.jsx)(Box, { width: "3.2rem", height: "3.2rem", padding: "0.8rem", children: (0, import_jsx_runtime.jsx)(
          ForwardRef$59,
          {
            "aria-label": formatMessage({
              id: "global.reset-password",
              defaultMessage: "Reset password"
            })
          }
        ) }) }),
        (0, import_jsx_runtime.jsx)(Td, { children: (0, import_jsx_runtime.jsx)(Typography, { children: formatMessage({
          id: "global.reset-password",
          defaultMessage: "Reset password"
        }) }) }),
        (0, import_jsx_runtime.jsx)(Td, { onClick: (e) => e.stopPropagation(), children: (0, import_jsx_runtime.jsx)(
          IconButton,
          {
            onClick: () => onEditClick("reset_password"),
            label: formatMessage({
              id: getTrad("Email.template.form.edit.label"),
              defaultMessage: "Edit a template"
            }),
            variant: "ghost",
            disabled: !canUpdate,
            children: (0, import_jsx_runtime.jsx)(ForwardRef$1r, {})
          }
        ) })
      ] }),
      (0, import_jsx_runtime.jsxs)(Tr, { cursor: "pointer", onClick: () => onEditClick("email_confirmation"), children: [
        (0, import_jsx_runtime.jsx)(Td, { children: (0, import_jsx_runtime.jsx)(Box, { width: "3.2rem", height: "3.2rem", padding: "0.8rem", children: (0, import_jsx_runtime.jsx)(
          ForwardRef$4x,
          {
            "aria-label": formatMessage({
              id: getTrad("Email.template.email_confirmation"),
              defaultMessage: "Email address confirmation"
            })
          }
        ) }) }),
        (0, import_jsx_runtime.jsx)(Td, { children: (0, import_jsx_runtime.jsx)(Typography, { children: formatMessage({
          id: getTrad("Email.template.email_confirmation"),
          defaultMessage: "Email address confirmation"
        }) }) }),
        (0, import_jsx_runtime.jsx)(Td, { onClick: (e) => e.stopPropagation(), children: (0, import_jsx_runtime.jsx)(
          IconButton,
          {
            onClick: () => onEditClick("email_confirmation"),
            label: formatMessage({
              id: getTrad("Email.template.form.edit.label"),
              defaultMessage: "Edit a template"
            }),
            variant: "ghost",
            disabled: !canUpdate,
            children: (0, import_jsx_runtime.jsx)(ForwardRef$1r, {})
          }
        ) })
      ] })
    ] })
  ] });
};
EmailTable.propTypes = {
  canUpdate: import_prop_types.default.bool.isRequired,
  onEditClick: import_prop_types.default.func.isRequired
};
var ProtectedEmailTemplatesPage = () => (0, import_jsx_runtime.jsx)(Page.Protect, { permissions: PERMISSIONS.readEmailTemplates, children: (0, import_jsx_runtime.jsx)(EmailTemplatesPage, {}) });
var EmailTemplatesPage = () => {
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const { notifyStatus } = useNotifyAT();
  const { toggleNotification } = useNotification();
  const queryClient = useQueryClient();
  const { get, put } = useFetchClient();
  const { formatAPIError } = useAPIErrorHandler();
  const [isModalOpen, setIsModalOpen] = React.useState(false);
  const [templateToEdit, setTemplateToEdit] = React.useState(null);
  const {
    isLoading: isLoadingForPermissions,
    allowedActions: { canUpdate }
  } = useRBAC({ update: PERMISSIONS.updateEmailTemplates });
  const { isLoading: isLoadingData, data } = useQuery(
    ["users-permissions", "email-templates"],
    async () => {
      const { data: data2 } = await get("/users-permissions/email-templates");
      return data2;
    },
    {
      onSuccess() {
        notifyStatus(
          formatMessage({
            id: getTrad("Email.template.data.loaded"),
            defaultMessage: "Email templates has been loaded"
          })
        );
      },
      onError(error) {
        toggleNotification({
          type: "danger",
          message: formatAPIError(error)
        });
      }
    }
  );
  const isLoading = isLoadingForPermissions || isLoadingData;
  const handleToggle = () => {
    setIsModalOpen((prev) => !prev);
  };
  const handleEditClick = (template) => {
    setTemplateToEdit(template);
    handleToggle();
  };
  const submitMutation = useMutation(
    (body) => put("/users-permissions/email-templates", { "email-templates": body }),
    {
      async onSuccess() {
        await queryClient.invalidateQueries(["users-permissions", "email-templates"]);
        toggleNotification({
          type: "success",
          message: formatMessage({ id: "notification.success.saved", defaultMessage: "Saved" })
        });
        trackUsage("didEditEmailTemplates");
        handleToggle();
      },
      onError(error) {
        toggleNotification({
          type: "danger",
          message: formatAPIError(error)
        });
      },
      refetchActive: true
    }
  );
  const handleSubmit = (body) => {
    trackUsage("willEditEmailTemplates");
    const editedTemplates = { ...data, [templateToEdit]: body };
    submitMutation.mutate(editedTemplates);
  };
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  return (0, import_jsx_runtime.jsxs)(Page.Main, { "aria-busy": submitMutation.isLoading, children: [
    (0, import_jsx_runtime.jsx)(Page.Title, { children: formatMessage(
      { id: "Settings.PageTitle", defaultMessage: "Settings - {name}" },
      {
        name: formatMessage({
          id: getTrad("HeaderNav.link.emailTemplates"),
          defaultMessage: "Email templates"
        })
      }
    ) }),
    (0, import_jsx_runtime.jsx)(
      Layouts.Header,
      {
        title: formatMessage({
          id: getTrad("HeaderNav.link.emailTemplates"),
          defaultMessage: "Email templates"
        })
      }
    ),
    (0, import_jsx_runtime.jsxs)(Layouts.Content, { children: [
      (0, import_jsx_runtime.jsx)(EmailTable, { onEditClick: handleEditClick, canUpdate }),
      (0, import_jsx_runtime.jsx)(
        EmailForm,
        {
          template: data[templateToEdit],
          onToggle: handleToggle,
          open: isModalOpen,
          onSubmit: handleSubmit
        }
      )
    ] })
  ] });
};
export {
  EmailTemplatesPage,
  ProtectedEmailTemplatesPage
};
//# sourceMappingURL=index-BCw6zVHf-CN52GQNI.js.map
