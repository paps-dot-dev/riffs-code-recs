import {
  require_isNil
} from "./chunk-WAGAUBUP.js";
import {
  useLicenseLimits
} from "./chunk-35AZTX3N.js";
import {
  useNotification
} from "./chunk-VKH5CSPD.js";
import {
  useIntl
} from "./chunk-YOH64ARV.js";
import {
  useLocation
} from "./chunk-BNKKIWCQ.js";
import {
  require_react
} from "./chunk-KUWPP3IT.js";
import {
  __toESM
} from "./chunk-WGAPYIUP.js";

// node_modules/.pnpm/@strapi+admin@5.9.0_@babel+runtime@7.26.7_@codemirror+autocomplete@6.18.4_@codemirror+languag_aezpjvp2mjsnwk5ooh22wkyeeu/node_modules/@strapi/admin/dist/admin/useLicenseLimitNotification-CAQIrlP4.mjs
var React = __toESM(require_react(), 1);
var import_isNil = __toESM(require_isNil(), 1);
var STORAGE_KEY_PREFIX = "strapi-notification-seat-limit";
var BILLING_STRAPI_CLOUD_URL = "https://cloud.strapi.io/profile/billing";
var BILLING_SELF_HOSTED_URL = "https://strapi.io/billing/request-seats";
var useLicenseLimitNotification = () => {
  const { formatMessage } = useIntl();
  const { license, isError, isLoading } = useLicenseLimits();
  const { toggleNotification } = useNotification();
  const { pathname } = useLocation();
  const { enforcementUserCount, permittedSeats, licenseLimitStatus, isHostedOnStrapiCloud } = license ?? {};
  React.useEffect(() => {
    if (isError || isLoading) {
      return;
    }
    const shouldDisplayNotification = !(0, import_isNil.default)(permittedSeats) && !window.sessionStorage.getItem(`${STORAGE_KEY_PREFIX}-${pathname}`) && (licenseLimitStatus === "AT_LIMIT" || licenseLimitStatus === "OVER_LIMIT");
    let notificationType;
    if (licenseLimitStatus === "OVER_LIMIT") {
      notificationType = "danger";
    } else if (licenseLimitStatus === "AT_LIMIT") {
      notificationType = "warning";
    }
    if (shouldDisplayNotification) {
      toggleNotification({
        type: notificationType,
        message: formatMessage(
          {
            id: "notification.ee.warning.over-.message",
            defaultMessage: "Add seats to {licenseLimitStatus, select, OVER_LIMIT {invite} other {re-enable}} Users. If you already did it but it's not reflected in Strapi yet, make sure to restart your app."
          },
          { licenseLimitStatus }
        ),
        title: formatMessage(
          {
            id: "notification.ee.warning.at-seat-limit.title",
            defaultMessage: "{licenseLimitStatus, select, OVER_LIMIT {Over} other {At}} seat limit ({enforcementUserCount}/{permittedSeats})"
          },
          {
            licenseLimitStatus,
            enforcementUserCount,
            permittedSeats
          }
        ),
        link: {
          url: isHostedOnStrapiCloud ? BILLING_STRAPI_CLOUD_URL : BILLING_SELF_HOSTED_URL,
          label: formatMessage(
            {
              id: "notification.ee.warning.seat-limit.link",
              defaultMessage: "{isHostedOnStrapiCloud, select, true {ADD SEATS} other {CONTACT SALES}}"
            },
            { isHostedOnStrapiCloud }
          )
        },
        blockTransition: true,
        onClose() {
          window.sessionStorage.setItem(`${STORAGE_KEY_PREFIX}-${pathname}`, "true");
        }
      });
    }
  }, [
    toggleNotification,
    license,
    pathname,
    formatMessage,
    isLoading,
    permittedSeats,
    licenseLimitStatus,
    enforcementUserCount,
    isHostedOnStrapiCloud,
    isError
  ]);
};

export {
  useLicenseLimitNotification
};
//# sourceMappingURL=chunk-6CVR6434.js.map
